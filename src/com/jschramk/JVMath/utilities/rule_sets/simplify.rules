@ADD_ZERO
simplify (x + 0) {
    x : Cancel the ${0}
}

@ADD_SAME
simplify (x + x) {
    2x
}

@FACTOR
simplify (a^2 + 2*a*b + b^2) {
    (a + b)^2
}

@SUBTRACT_SAME
simplify (x - x) {
    0
}

@ADD_WITH_COEFFICIENT
simplify (x + a * x) {
    (1 + a) * x
} where {
    x: is f(#target)
}

// this makes it so the target variable will be collected even when the coefficient is not a literal
@COLLECT_LIKE_WITH_COEFFICIENTS
simplify (a * x + b * x) {
    (a + b) * x
} where {
    a: not f(#target)
    b: not f(#target)
    x: is f(#target)
}

// this allows non target variables with literal coefficients to be collected
@COLLECT_LIKE_WITH_LITERAL_COEFFICIENTS
simplify (a * x + b * x) {
    (a + b) * x
} where {
    a: not f(#target), is literal
    b: not f(#target), is literal
}

// this allows non target variables with literal coefficients to be collected
@COLLECT_LIKE_WITH_LITERAL_COEFFICIENTS_AND_NEGATIONS
simplify (a * x + -(b) * x) {
    (a - b) * x
} where {
    a: not f(#target), is literal
    b: not f(#target), is literal
}

// TODO: evaluate this rule and decide whether to keep
// this makes it so non target variables will be distributed, prioritizing shallower tree depth
@DISTRIBUTE_ALL_NON_TARGET
simplify (n * (a + b)) {
    (n * a) + (n * b)
} where {
    a: not f(#target)
    b: not f(#target)
    n: not f(#target)
}

@DISTRIBUTE_TARGET
simplify ((a + b) * x) {
    a * x + b * x
} where {
    b: is f(#target)
    x: is f(#target)
}

// the a: is f(#target) here sorta works like a OR b is f(#target) because the mapping algorithm
// will permute the mapping so that a maps to whatever is the f(#target)
/*@DISTRIBUTE_NON_TARGET
simplify (n * (a + b)) {
    (n * a) + (n * b)
} where {
    n: not f(#target)
    a: is f(#target)
}*/

@DISTRIBUTE_LITERAL
simplify (n * (a + b)) {
    (n * a) + (n * b)
} where {
    n: is literal
}

@ADD_SAME_DENOMINATOR
simplify (a/x + b/x) {
    (a + b) / x
}

@ADD_DIFFERENT_DENOMINATOR
simplify (a/b + c/d) {
    (a * d + b * c)/(b * d)
}

@NEGATIVE_ZERO
simplify (-0) {
    0
}

@MULTIPLY_BY_ZERO
simplify (0x) {
    0
}

@MULTIPLY_BY_ONE
simplify (1x) {
    x
}

@MULTIPLY_BY_NEGATIVE_ONE
simplify ((-1) * x) {
    -x
}

// this is different from the previous rule because the -1 in the previous
// rule is a negation of literal 1, and this one is a literal -1
@MULTIPLY_BY_LITERAL_NEGATIVE_ONE
simplify (neg1 * x) {
    -x
} where {
    neg1: is literal, is = -1
}

@DOUBLE_NEGATIVE
simplify (-(-x)) {
    x
}

simplify (-(a + b)) {
    -a - b
}

simplify (-(a * b)) {
    (-a) * b
}

simplify (-(a/b)) {
    (-a)/b
}

@MULTIPLY_SAME
simplify (x * x) {
    x^2
}

@MULTIPLY_SAME_BASE_1
simplify (x * x^a) {
    x^(1 + a)
}

@MULTIPLY_SAME_BASE_2
simplify (x^a * x^b) {
    x^(a + b)
}

// only do this to get to c, otherwise leave it alone
simplify (a^c * b^c) {
    (a * b)^c
} where {
    c: is f(#target)
}

simplify ((a/b) * (c/d)) {
    (a*c) / (b*d)
}

simplify (0/x) {
    0
}

simplify (x/x) {
    1
}

simplify (x/1) {
    x
}

simplify (a/b/c) {
    a/(b * c)
}

simplify ((a * b)/b) {
    a
}

simplify ((a * x)/(b * x)) {
    a/b
}

simplify (x/(a * x)) {
    1/a
}

simplify (a/(b/c)) {
    (a * c)/b
}

simplify (a * (b/c)) {
    (a * b)/c
}

simplify (x^a/x) {
    x^(a - 1)
}

simplify (x^a/x^b) {
    x^(a - b)
}

simplify (0^x) {
    0
}

simplify (1^x) {
    1
}

simplify (x^0) {
    1
}

simplify (x^1) {
    x
}

simplify (x^-1) {
    1/x
}

simplify (x^-a) {
    1/x^a
}

simplify ((x^a)^b) {
    x^(a * b)
}

simplify (asin(sin(x))) {
    x
}

simplify (acos(cos(x))) {
    x
}

simplify (atan(tan(x))) {
    x
}

simplify (log(a, a^x)) {
    x
}

simplify (b^(1/a)) {
    root(a, b)
}

simplify (a^(0.5)) {
    root(a)
}

simplify (root(n, a^n/b)) {
    a/root(n, b)
}

simplify (root(n, a/b^n)) {
    root(n, a)/b
}

simplify (root(2, x)) {
    root(x)
}

simplify (root(a, x^a)) {
    x
}

simplify (sin(x)^2 + cos(x)^2) {
    1
}

simplify (log(a, b^c)) {
    c * log(a, b)
}

simplify (log(a^b)) {
    b * log(a)
}

simplify (a * (b + c) + d * (f + g)) {
    (a * b) + (a * c) + (d * f) + (d * g)
}

// basically makes the engine prefer non-variables to be negated over variables
simplify (a * (-x)) {
    (-a) * x
} where {
    x: is variable
    a: not variable
}

simplify (a/b + c) {
    (a + b * c)/b
} where {
    b: is literal
}

simplify ((a * x^n1)/(b * x^n2)) {
    a * x^(n1 - n2)/b
}

simplify (x^n1/(b * x^n2)) {
    x^(n1 - n2)/b
}

simplify ((a * x^n1)/x^n2) {
    a * x^(n1 - n2)
}
